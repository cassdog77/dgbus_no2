import React, { useState, useEffect } from 'react';

export default function BusStopDetails({ stopName }) { // stopName을 props로 받아옴
  const [busNumber, setBusNumber] = useState(''); // 사용자가 입력한 버스 번호
  const [bsId, setBsId] = useState(null); // 찾은 bsId 값을 저장
  const [arrivalInfo, setArrivalInfo] = useState([]);
  const [error, setError] = useState(null);
  const [autocompleteData, setAutocompleteData] = useState([]); // API에서 받은 데이터를 저장

  // autocomplete API에서 모든 데이터를 가져오는 함수
  const fetchAutocompleteData = async () => {
    console.log('Autocomplete 데이터 가져오는 중'); // 디버깅 추가
    try {
      const response = await fetch(`https://businfo.daegu.go.kr:8095/dbms_web_api/autocomplete`);
      if (!response.ok) {
        console.error('API 요청 실패:', response.status); // 디버깅 추가
        throw new Error('API 요청 실패');
      }

      const data = await response.json();
      console.log('Autocomplete API 응답:', data); // 디버깅 추가

      // autocomplete 데이터 저장
      setAutocompleteData(data.body);
    } catch (err) {
      console.error('fetchAutocompleteData 에러:', err); // 디버깅 추가
      setError('Autocomplete 데이터를 불러오는 중 오류가 발생했습니다.');
    }
  };

  // 사용자가 입력한 버스 번호로 autocomplete에서 매칭되는 value 찾기
  const fetchBusId = () => {
    console.log('버스 번호 검색 시작:', busNumber); // 디버깅 추가

    const matchingBus = autocompleteData.find((item) => item.text === stopName); // stopName을 사용하여 매칭
    if (matchingBus) {
      console.log('매칭된 버스:', matchingBus); // 디버깅 추가
      setBsId(matchingBus.value); // 찾은 value를 bsId로 설정
    } else {
      console.error('매칭되는 버스 없음'); // 디버깅 추가
      setError('입력한 정류장 이름에 해당하는 정류장이 없습니다.');
    }
  };

  // 페이지가 처음 로드될 때 autocomplete 데이터를 가져옴
  useEffect(() => {
    fetchAutocompleteData();
  }, []);

  // bsId가 설정되면 해당 bsId로 도착 정보를 가져옴
  useEffect(() => {
    const fetchArrivalInfo = async () => {
      if (!bsId) return;

      console.log('도착 정보 가져오는 중, bsId:', bsId); // 디버깅 추가
      try {
        const response = await fetch(`https://businfo.daegu.go.kr:8095/dbms_web_api/realtime/arr2/${bsId}`);
        if (!response.ok) {
          console.error('도착 정보 API 요청 실패:', response.status); // 디버깅 추가
          throw new Error('도착 정보 API 요청 실패');
        }

        const data = await response.json();
        console.log('도착 정보 API 응답:', data); // 디버깅 추가
        if (data.body.list) {
          setArrivalInfo(data.body.list);
        } else {
          console.error('도착 정보 없음'); // 디버깅 추가
          setError('도착 정보가 없습니다.');
        }
      } catch (err) {
        console.error('fetchArrivalInfo 에러:', err); // 디버깅 추가
        setError(err.message);
      }
    };

    fetchArrivalInfo();
  }, [bsId]);

  const handleBusNumberSubmit = (e) => {
    e.preventDefault();
    console.log('버스 번호 제출:', busNumber); // 디버깅 추가
    fetchBusId();
  };

  if (!arrivalInfo.length && !error) return <div>버스 도착 정보를 불러오는 중...</div>;

  return (
    <div style={{ fontFamily: 'Arial, sans-serif', fontSize: '14px', margin: '20px' }}>
      <h1 style={{ textAlign: 'center' }}>버스 도착 정보</h1>
      {error ? (
        <p style={{ color: 'red', textAlign: 'center' }}>{error}</p>
      ) : (
        <>
          <form onSubmit={handleBusNumberSubmit} style={{ marginBottom: '20px' }}>
            <label>
              버스 번호 입력:
              <input
                type="text"
                value={busNumber}
                onChange={(e) => setBusNumber(e.target.value)}
                style={{ marginLeft: '10px', padding: '5px' }}
              />
            </label>
            <button type="submit" style={{ marginLeft: '10px', padding: '5px 10px' }}>검색</button>
          </form>
          <table style={{ width: '100%', borderCollapse: 'collapse', textAlign: 'center', border: '1px solid #ccc' }}>
            <thead>
              <tr>
                <th style={{ padding: '6px', backgroundColor: '#f2f2f2', border: '1px solid #ccc' }}>버스 번호</th>
                <th style={{ padding: '6px', backgroundColor: '#f2f2f2', border: '1px solid #ccc' }}>도착 정보</th>
                <th style={{ padding: '6px', backgroundColor: '#f2f2f2', border: '1px solid #ccc' }}>남은 정류장</th>
              </tr>
            </thead>
            <tbody>
              {arrivalInfo.map((bus, index) => (
                <tr key={index}>
                  <td style={{ padding: '6px', border: '1px solid #ccc' }}>{bus.routeNo}</td>
                  <td style={{ padding: '6px', border: '1px solid #ccc' }}>{bus.arrivalTime || '정보 없음'}</td>
                  <td style={{ padding: '6px', border: '1px solid #ccc' }}>{bus.remainingStops || '정보 없음'}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </>
      )}
    </div>
  );
}